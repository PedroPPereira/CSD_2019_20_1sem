-- Net Parque - IOPT
-- Automatic code generated by IOPT2VHDL XSLT transformation.
-- by GRES Research Group - 2014 


Library IEEE;
Use IEEE.STD_LOGIC_1164.ALL;
Use IEEE.STD_LOGIC_ARITH.ALL;
Use IEEE.STD_LOGIC_UNSIGNED.ALL;
Use IEEE.NUMERIC_STD.ALL;


Entity Parque IS
Port(
    Clk : IN STD_LOGIC;
    PRES1_IN : IN STD_LOGIC;
    PRES2_IN : IN STD_LOGIC;
    TICKET_IN : IN STD_LOGIC;
    PRES1_OUT : IN STD_LOGIC;
    PRES2_OUT : IN STD_LOGIC;
    TICKET_OUT : IN STD_LOGIC;
    PRES1_IN_c : IN STD_LOGIC;
    PRES2_IN_c : IN STD_LOGIC;
    TICKET_IN_c : IN STD_LOGIC;
    PRES1_OUT_c : IN STD_LOGIC;
    PRES2_OUT_c : IN STD_LOGIC;
    TICKET_OUT_c : IN STD_LOGIC;
    AND_Y_up : IN STD_LOGIC;
    AND_X_up : IN STD_LOGIC;
    AND_X_down : IN STD_LOGIC;
    AND_Y_down : IN STD_LOGIC;
    CANC_IN : OUT STD_LOGIC;
    CANC_OUT : OUT STD_LOGIC;
    CANC_IN_c : OUT STD_LOGIC;
    CANC_OUT_c : OUT STD_LOGIC;
    occupied_1 : OUT INTEGER RANGE 0 TO 99;
    occupied_2 : OUT INTEGER RANGE 0 TO 99;
    Enable : IN STD_LOGIC;
    p1 : OUT STD_LOGIC_VECTOR(5 downto 0);
    p2 : OUT STD_LOGIC_VECTOR(5 downto 0);
    p3 : OUT STD_LOGIC_VECTOR(5 downto 0);
    p4 : OUT STD_LOGIC_VECTOR(5 downto 0);
    p5 : OUT STD_LOGIC_VECTOR(5 downto 0);
    Reset : IN STD_LOGIC
);
End Parque;

Architecture Structural OF Parque IS

    Signal p_2: INTEGER RANGE 0 TO 1 := 1;
    Signal p_3: INTEGER RANGE 0 TO 1 := 0;
    Signal p_5: INTEGER RANGE 0 TO 1 := 0;
    Signal p_6: INTEGER RANGE 0 TO 1 := 0;
    Signal p_91: INTEGER RANGE 0 TO 99 := 0;
    Signal p_93: INTEGER RANGE 0 TO 99 := 99;
    Signal p_852: INTEGER RANGE 0 TO 99 := 0;
    Signal p_858: INTEGER RANGE 0 TO 99 := 0;
    Signal p_871: INTEGER RANGE 0 TO 99 := 99;
    Signal p_881: INTEGER RANGE 0 TO 99 := 99;
    Signal p_889: INTEGER RANGE 0 TO 1 := 1;
    Signal p_890: INTEGER RANGE 0 TO 1 := 0;
    Signal p_891: INTEGER RANGE 0 TO 1 := 0;
    Signal p_907: INTEGER RANGE 0 TO 3 := 0;
    Signal p_916: INTEGER RANGE 0 TO 1 := 1;
    Signal p_917: INTEGER RANGE 0 TO 1 := 0;
    Signal p_918: INTEGER RANGE 0 TO 1 := 0;
    Signal p_924: INTEGER RANGE 0 TO 1 := 0;
    Signal p_950: INTEGER RANGE 0 TO 1 := 0;
    Signal p_966: INTEGER RANGE 0 TO 1 := 1;
    Signal p_967: INTEGER RANGE 0 TO 1 := 0;
    Signal p_968: INTEGER RANGE 0 TO 1 := 0;
    Signal p_969: INTEGER RANGE 0 TO 1 := 0;
    Signal p_975: INTEGER RANGE 0 TO 1 := 0;
    Signal p_1030: INTEGER RANGE 0 TO 1 := 1;
    Signal p_1031: INTEGER RANGE 0 TO 1 := 0;
    Signal p_1032: INTEGER RANGE 0 TO 1 := 0;
    Signal p_1033: INTEGER RANGE 0 TO 1 := 0;
    Signal p_1039: INTEGER RANGE 0 TO 1 := 0;
    Signal p_1062: INTEGER RANGE 0 TO 1 := 1;
    Signal p_1063: INTEGER RANGE 0 TO 1 := 0;
    Signal p_1064: INTEGER RANGE 0 TO 1 := 0;
    Signal p_1065: INTEGER RANGE 0 TO 1 := 0;
    Signal p_1071: INTEGER RANGE 0 TO 1 := 0;
    Signal p_1153: INTEGER RANGE 0 TO 3 := 0;
    Signal p_1154: INTEGER RANGE 0 TO 3 := 0;
    Signal p_1155: INTEGER RANGE 0 TO 3 := 0;
    Signal p_1176: INTEGER RANGE 0 TO 3 := 1;
    Signal p_1193: INTEGER RANGE 0 TO 3 := 0;
    Signal p_1194: INTEGER RANGE 0 TO 3 := 0;
    Signal p_1195: INTEGER RANGE 0 TO 3 := 0;


    Signal s_CANC_IN : STD_LOGIC := '0';
    Signal s_CANC_OUT : STD_LOGIC := '0';
    Signal s_CANC_IN_c : STD_LOGIC := '0';
    Signal s_CANC_OUT_c : STD_LOGIC := '0';
    Signal s_occupied_1 : INTEGER RANGE 0 TO 99 := 0;
    Signal s_occupied_2 : INTEGER RANGE 0 TO 99 := 0;

    -- Array implementation:

Begin
    -- Selected array items:

    proc_in_events: PROCESS( Clk, Enable ) IS
    Begin
      If falling_edge(Clk) Then
        If Reset = '0' AND Enable = '1' Then
        End If;
      End If;
    End PROCESS;


    proc_transitions: PROCESS( Clk, Enable, Reset ) IS
      Variable p_2_add, p_2_avail : INTEGER RANGE 0 to 1;
      Variable p_3_add, p_3_avail : INTEGER RANGE 0 to 1;
      Variable p_5_add, p_5_avail : INTEGER RANGE 0 to 1;
      Variable p_6_add, p_6_avail : INTEGER RANGE 0 to 1;
      Variable p_91_add, p_91_avail : INTEGER RANGE 0 to 99;
      Variable p_93_add, p_93_avail : INTEGER RANGE 0 to 99;
      Variable p_852_add, p_852_avail : INTEGER RANGE 0 to 99;
      Variable p_858_add, p_858_avail : INTEGER RANGE 0 to 99;
      Variable p_871_add, p_871_avail : INTEGER RANGE 0 to 99;
      Variable p_881_add, p_881_avail : INTEGER RANGE 0 to 99;
      Variable p_889_add, p_889_avail : INTEGER RANGE 0 to 1;
      Variable p_890_add, p_890_avail : INTEGER RANGE 0 to 1;
      Variable p_891_add, p_891_avail : INTEGER RANGE 0 to 1;
      Variable p_907_add, p_907_avail : INTEGER RANGE 0 to 3;
      Variable p_916_add, p_916_avail : INTEGER RANGE 0 to 1;
      Variable p_917_add, p_917_avail : INTEGER RANGE 0 to 1;
      Variable p_918_add, p_918_avail : INTEGER RANGE 0 to 1;
      Variable p_924_add, p_924_avail : INTEGER RANGE 0 to 1;
      Variable p_950_add, p_950_avail : INTEGER RANGE 0 to 1;
      Variable p_966_add, p_966_avail : INTEGER RANGE 0 to 1;
      Variable p_967_add, p_967_avail : INTEGER RANGE 0 to 1;
      Variable p_968_add, p_968_avail : INTEGER RANGE 0 to 1;
      Variable p_969_add, p_969_avail : INTEGER RANGE 0 to 1;
      Variable p_975_add, p_975_avail : INTEGER RANGE 0 to 1;
      Variable p_1030_add, p_1030_avail : INTEGER RANGE 0 to 1;
      Variable p_1031_add, p_1031_avail : INTEGER RANGE 0 to 1;
      Variable p_1032_add, p_1032_avail : INTEGER RANGE 0 to 1;
      Variable p_1033_add, p_1033_avail : INTEGER RANGE 0 to 1;
      Variable p_1039_add, p_1039_avail : INTEGER RANGE 0 to 1;
      Variable p_1062_add, p_1062_avail : INTEGER RANGE 0 to 1;
      Variable p_1063_add, p_1063_avail : INTEGER RANGE 0 to 1;
      Variable p_1064_add, p_1064_avail : INTEGER RANGE 0 to 1;
      Variable p_1065_add, p_1065_avail : INTEGER RANGE 0 to 1;
      Variable p_1071_add, p_1071_avail : INTEGER RANGE 0 to 1;
      Variable p_1153_add, p_1153_avail : INTEGER RANGE 0 to 3;
      Variable p_1154_add, p_1154_avail : INTEGER RANGE 0 to 3;
      Variable p_1155_add, p_1155_avail : INTEGER RANGE 0 to 3;
      Variable p_1176_add, p_1176_avail : INTEGER RANGE 0 to 3;
      Variable p_1193_add, p_1193_avail : INTEGER RANGE 0 to 3;
      Variable p_1194_add, p_1194_avail : INTEGER RANGE 0 to 3;
      Variable p_1195_add, p_1195_avail : INTEGER RANGE 0 to 3;
    Begin
      If Reset = '1' Then
          p_2 <= 1;
          p_3 <= 0;
          p_5 <= 0;
          p_6 <= 0;
          p_91 <= 0;
          p_93 <= 99;
          p_852 <= 0;
          p_858 <= 0;
          p_871 <= 99;
          p_881 <= 99;
          p_889 <= 1;
          p_890 <= 0;
          p_891 <= 0;
          p_907 <= 0;
          p_916 <= 1;
          p_917 <= 0;
          p_918 <= 0;
          p_924 <= 0;
          p_950 <= 0;
          p_966 <= 1;
          p_967 <= 0;
          p_968 <= 0;
          p_969 <= 0;
          p_975 <= 0;
          p_1030 <= 1;
          p_1031 <= 0;
          p_1032 <= 0;
          p_1033 <= 0;
          p_1039 <= 0;
          p_1062 <= 1;
          p_1063 <= 0;
          p_1064 <= 0;
          p_1065 <= 0;
          p_1071 <= 0;
          p_1153 <= 0;
          p_1154 <= 0;
          p_1155 <= 0;
          p_1176 <= 1;
          p_1193 <= 0;
          p_1194 <= 0;
          p_1195 <= 0;
      Elsif rising_edge(Clk) Then
        If Enable = '1' Then
          p_2_avail := p_2;
          p_2_add := 0;   -- inic_in_1;
          p_3_avail := p_3;
          p_3_add := 0;   -- enter_press1_1_in;
          p_5_avail := p_5;
          p_5_add := 0;   -- open_gate_in1_1;
          p_6_avail := p_6;
          p_6_add := 0;   -- open_gate_in2_1;
          p_91_avail := p_91;
          p_91_add := 0;   -- cap_total_occupied;
          p_93_avail := p_93;
          p_93_add := 0;   -- cap_total_free;
          p_852_avail := p_852;
          p_852_add := 0;   -- cap_1_occupied;
          p_858_avail := p_858;
          p_858_add := 0;   -- cap_2_occupied;
          p_871_avail := p_871;
          p_871_add := 0;   -- cap_1;
          p_881_avail := p_881;
          p_881_add := 0;   -- cap_2_free;
          p_889_avail := p_889;
          p_889_add := 0;   -- inic_slope_1_2;
          p_890_avail := p_890;
          p_890_add := 0;   -- slope_1_2_X;
          p_891_avail := p_891;
          p_891_add := 0;   -- slope_1_2_XY;
          p_907_avail := p_907;
          p_907_add := 0;   -- slope_1_2_Y;
          p_916_avail := p_916;
          p_916_add := 0;   -- inic_slope_2_1;
          p_917_avail := p_917;
          p_917_add := 0;   -- inic_slope_2_1_X;
          p_918_avail := p_918;
          p_918_add := 0;   -- slope_2_1_XY;
          p_924_avail := p_924;
          p_924_add := 0;   -- inic_slope_2_1_Y;
          p_950_avail := p_950;
          p_950_add := 0;   -- open_gate_in3_1;
          p_966_avail := p_966;
          p_966_add := 0;   -- inic_out_1;
          p_967_avail := p_967;
          p_967_add := 0;   -- enter_press1_1_out;
          p_968_avail := p_968;
          p_968_add := 0;   -- open_gate_out1_1;
          p_969_avail := p_969;
          p_969_add := 0;   -- open_gate_out2_1;
          p_975_avail := p_975;
          p_975_add := 0;   -- open_gate_out3_1;
          p_1030_avail := p_1030;
          p_1030_add := 0;   -- inic_in_2;
          p_1031_avail := p_1031;
          p_1031_add := 0;   -- enter_press1_2_in;
          p_1032_avail := p_1032;
          p_1032_add := 0;   -- open_gate_in1_2;
          p_1033_avail := p_1033;
          p_1033_add := 0;   -- open_gate_in2_2;
          p_1039_avail := p_1039;
          p_1039_add := 0;   -- open_gate_in3_2;
          p_1062_avail := p_1062;
          p_1062_add := 0;   -- inic_out_2;
          p_1063_avail := p_1063;
          p_1063_add := 0;   -- enter_press1_2_out;
          p_1064_avail := p_1064;
          p_1064_add := 0;   -- open_gate_out1_2;
          p_1065_avail := p_1065;
          p_1065_add := 0;   -- open_gate_out2_2;
          p_1071_avail := p_1071;
          p_1071_add := 0;   -- open_gate_out3_2;
          p_1153_avail := p_1153;
          p_1153_add := 0;   -- pl_1153;
          p_1154_avail := p_1154;
          p_1154_add := 0;   -- pl_1154;
          p_1155_avail := p_1155;
          p_1155_add := 0;   -- pl_1155;
          p_1176_avail := p_1176;
          p_1176_add := 0;   -- pl_1176;
          p_1193_avail := p_1193;
          p_1193_add := 0;   -- pl_1193;
          p_1194_avail := p_1194;
          p_1194_add := 0;   -- pl_1194;
          p_1195_avail := p_1195;
          p_1195_add := 0;   -- pl_1195;


          -- Transition 7 - tr_7
          If (p_2_avail >= 1) and 
             (conv_integer(PRES1_IN) = 1 AND conv_integer(PRES2_IN) = 0 AND conv_integer(TICKET_IN) = 0) -- guard expr 
          Then
              p_2_avail := p_2_avail - 1;    -- inic_in_1
              p_3_add := p_3_add + 1;   -- enter_press1_1_in
          End If;

          -- Transition 9 - tr_9
          If (p_3_avail >= 1) and
             (p_93_avail >= 1) and
             (p_871_avail >= 1) and 
             (conv_integer(PRES1_IN) = 1 AND conv_integer(PRES2_IN) = 0 AND conv_integer(TICKET_IN) = 1) -- guard expr 
          Then
              p_3_avail := p_3_avail - 1;    -- enter_press1_1_in
              p_93_avail := p_93_avail - 1;    -- cap_total_free
              p_871_avail := p_871_avail - 1;    -- cap_1
              p_5_add := p_5_add + 1;   -- open_gate_in1_1
          End If;

          -- Transition 11 - tr_11
          If (p_5_avail >= 1) and 
             (conv_integer(PRES1_IN) = 1 AND conv_integer(PRES2_IN) = 1) -- guard expr 
          Then
              p_5_avail := p_5_avail - 1;    -- open_gate_in1_1
              p_6_add := p_6_add + 1;   -- open_gate_in2_1
          End If;

          -- Transition 12 - tr_12
          If (p_950_avail >= 1) and 
             (conv_integer(PRES1_IN) = 0 AND conv_integer(PRES2_IN) = 0) -- guard expr 
          Then
              p_950_avail := p_950_avail - 1;    -- open_gate_in3_1
              p_2_add := p_2_add + 1;   -- inic_in_1
              p_91_add := p_91_add + 1;   -- cap_total_occupied
              p_852_add := p_852_add + 1;   -- cap_1_occupied
          End If;

          -- Transition 892 - tr_892
          If (p_889_avail >= 1) and
             (p_881_avail >= 1) and 
             (conv_integer(AND_X_up) = 1 AND conv_integer(AND_Y_up) = 0) -- guard expr 
          Then
              p_889_avail := p_889_avail - 1;    -- inic_slope_1_2
              p_881_avail := p_881_avail - 1;    -- cap_2_free
              p_890_add := p_890_add + 1;   -- slope_1_2_X
          End If;

          -- Transition 893 - tr_893
          If (p_890_avail >= 1) and 
             (conv_integer(AND_X_up) = 1 AND conv_integer(AND_Y_up) = 1) -- guard expr 
          Then
              p_890_avail := p_890_avail - 1;    -- slope_1_2_X
              p_891_add := p_891_add + 1;   -- slope_1_2_XY
          End If;

          -- Transition 894 - tr_894
          If (p_891_avail >= 1) and 
             (conv_integer(AND_X_up) = 0 AND conv_integer(AND_Y_up) = 1) -- guard expr 
          Then
              p_891_avail := p_891_avail - 1;    -- slope_1_2_XY
              p_907_add := p_907_add + 1;   -- slope_1_2_Y
          End If;

          -- Transition 900 - tr_900
          If (p_890_avail >= 1) and 
             (conv_integer(AND_X_up) = 0 AND conv_integer(AND_Y_up) = 0) -- guard expr 
          Then
              p_890_avail := p_890_avail - 1;    -- slope_1_2_X
              p_889_add := p_889_add + 1;   -- inic_slope_1_2
              p_881_add := p_881_add + 1;   -- cap_2_free
          End If;

          -- Transition 901 - tr_901
          If (p_891_avail >= 1) and 
             (conv_integer(AND_X_up) = 1 AND conv_integer(AND_Y_up) = 0) -- guard expr 
          Then
              p_891_avail := p_891_avail - 1;    -- slope_1_2_XY
              p_890_add := p_890_add + 1;   -- slope_1_2_X
          End If;

          -- Transition 908 - tr_908
          If (p_907_avail >= 1) and 
             (conv_integer(AND_X_up) = 1 AND conv_integer(AND_Y_up) = 1) -- guard expr 
          Then
              p_907_avail := p_907_avail - 1;    -- slope_1_2_Y
              p_891_add := p_891_add + 1;   -- slope_1_2_XY
          End If;

          -- Transition 912 - tr_912
          If (p_907_avail >= 1) and
             (p_852_avail >= 1) and 
             (conv_integer(AND_X_up) = 0 AND conv_integer(AND_Y_up) = 0) -- guard expr 
          Then
              p_907_avail := p_907_avail - 1;    -- slope_1_2_Y
              p_852_avail := p_852_avail - 1;    -- cap_1_occupied
              p_889_add := p_889_add + 1;   -- inic_slope_1_2
              p_858_add := p_858_add + 1;   -- cap_2_occupied
              p_871_add := p_871_add + 1;   -- cap_1
          End If;

          -- Transition 919 - tr_892_2
          If (p_916_avail >= 1) and
             (p_871_avail >= 1) and 
             (conv_integer(AND_X_down) = 1 AND conv_integer(AND_Y_down) = 0) -- guard expr 
          Then
              p_916_avail := p_916_avail - 1;    -- inic_slope_2_1
              p_871_avail := p_871_avail - 1;    -- cap_1
              p_917_add := p_917_add + 1;   -- inic_slope_2_1_X
          End If;

          -- Transition 920 - tr_893_2
          If (p_917_avail >= 1) and 
             (conv_integer(AND_X_down) = 1 AND conv_integer(AND_Y_down) = 1) -- guard expr 
          Then
              p_917_avail := p_917_avail - 1;    -- inic_slope_2_1_X
              p_918_add := p_918_add + 1;   -- slope_2_1_XY
          End If;

          -- Transition 921 - tr_894_2
          If (p_918_avail >= 1) and 
             (conv_integer(AND_X_down) = 0 AND conv_integer(AND_Y_down) = 1) -- guard expr 
          Then
              p_918_avail := p_918_avail - 1;    -- slope_2_1_XY
              p_924_add := p_924_add + 1;   -- inic_slope_2_1_Y
          End If;

          -- Transition 922 - tr_900_2
          If (p_917_avail >= 1) and 
             (conv_integer(AND_X_down) = 0 AND conv_integer(AND_Y_down) = 0) -- guard expr 
          Then
              p_917_avail := p_917_avail - 1;    -- inic_slope_2_1_X
              p_916_add := p_916_add + 1;   -- inic_slope_2_1
              p_871_add := p_871_add + 1;   -- cap_1
          End If;

          -- Transition 923 - tr_901_2
          If (p_918_avail >= 1) and 
             (conv_integer(AND_X_down) = 1 AND conv_integer(AND_Y_down) = 0) -- guard expr 
          Then
              p_918_avail := p_918_avail - 1;    -- slope_2_1_XY
              p_917_add := p_917_add + 1;   -- inic_slope_2_1_X
          End If;

          -- Transition 925 - tr_908_2
          If (p_924_avail >= 1) and 
             (conv_integer(AND_X_down) = 1 AND conv_integer(AND_Y_down) = 1) -- guard expr 
          Then
              p_924_avail := p_924_avail - 1;    -- inic_slope_2_1_Y
              p_918_add := p_918_add + 1;   -- slope_2_1_XY
          End If;

          -- Transition 926 - tr_912_2
          If (p_924_avail >= 1) and
             (p_858_avail >= 1) and 
             (conv_integer(AND_X_down) = 0 AND conv_integer(AND_Y_down) = 0) -- guard expr 
          Then
              p_924_avail := p_924_avail - 1;    -- inic_slope_2_1_Y
              p_858_avail := p_858_avail - 1;    -- cap_2_occupied
              p_916_add := p_916_add + 1;   -- inic_slope_2_1
              p_852_add := p_852_add + 1;   -- cap_1_occupied
              p_881_add := p_881_add + 1;   -- cap_2_free
          End If;

          -- Transition 949 - tr_949
          If (p_6_avail >= 1) and 
             (conv_integer(PRES1_IN) = 0 AND conv_integer(PRES2_IN) = 1) -- guard expr 
          Then
              p_6_avail := p_6_avail - 1;    -- open_gate_in2_1
              p_950_add := p_950_add + 1;   -- open_gate_in3_1
          End If;

          -- Transition 954 - tr_954
          If (p_3_avail >= 1) and 
             (conv_integer(PRES1_IN) = 0 AND conv_integer(PRES2_IN) = 0 AND conv_integer(TICKET_IN) = 0) -- guard expr 
          Then
              p_3_avail := p_3_avail - 1;    -- enter_press1_1_in
              p_2_add := p_2_add + 1;   -- inic_in_1
          End If;

          -- Transition 957 - tr_957
          If (p_5_avail >= 1) and 
             (conv_integer(PRES1_IN) = 0 AND conv_integer(PRES2_IN) = 0) -- guard expr 
          Then
              p_5_avail := p_5_avail - 1;    -- open_gate_in1_1
              p_2_add := p_2_add + 1;   -- inic_in_1
              p_93_add := p_93_add + 1;   -- cap_total_free
              p_871_add := p_871_add + 1;   -- cap_1
          End If;

          -- Transition 960 - tr_960
          If (p_6_avail >= 1) and 
             (conv_integer(PRES1_IN) = 1 AND conv_integer(PRES2_IN) = 0) -- guard expr 
          Then
              p_6_avail := p_6_avail - 1;    -- open_gate_in2_1
              p_5_add := p_5_add + 1;   -- open_gate_in1_1
          End If;

          -- Transition 963 - tr_963
          If (p_950_avail >= 1) and 
             (conv_integer(PRES1_IN) = 1 AND conv_integer(PRES2_IN) = 1) -- guard expr 
          Then
              p_950_avail := p_950_avail - 1;    -- open_gate_in3_1
              p_6_add := p_6_add + 1;   -- open_gate_in2_1
          End If;

          -- Transition 970 - tr_7_3
          If (p_966_avail >= 1) and 
             (conv_integer(PRES1_OUT) = 1 AND conv_integer(PRES2_OUT) = 0 AND conv_integer(TICKET_OUT) = 0) -- guard expr 
          Then
              p_966_avail := p_966_avail - 1;    -- inic_out_1
              p_967_add := p_967_add + 1;   -- enter_press1_1_out
          End If;

          -- Transition 971 - tr_9_3
          If (p_967_avail >= 1) and
             (p_91_avail >= 1) and
             (p_852_avail >= 1) and 
             (conv_integer(PRES1_OUT) = 1 AND conv_integer(PRES2_OUT) = 0 AND conv_integer(TICKET_OUT) = 1) -- guard expr 
          Then
              p_967_avail := p_967_avail - 1;    -- enter_press1_1_out
              p_91_avail := p_91_avail - 1;    -- cap_total_occupied
              p_852_avail := p_852_avail - 1;    -- cap_1_occupied
              p_968_add := p_968_add + 1;   -- open_gate_out1_1
          End If;

          -- Transition 972 - tr_11_3
          If (p_968_avail >= 1) and 
             (conv_integer(PRES1_OUT) = 1 AND conv_integer(PRES2_OUT) = 1) -- guard expr 
          Then
              p_968_avail := p_968_avail - 1;    -- open_gate_out1_1
              p_969_add := p_969_add + 1;   -- open_gate_out2_1
          End If;

          -- Transition 973 - tr_12_3
          If (p_975_avail >= 1) and 
             (conv_integer(PRES1_OUT) = 0 AND conv_integer(PRES2_OUT) = 0) -- guard expr 
          Then
              p_975_avail := p_975_avail - 1;    -- open_gate_out3_1
              p_966_add := p_966_add + 1;   -- inic_out_1
              p_93_add := p_93_add + 1;   -- cap_total_free
              p_871_add := p_871_add + 1;   -- cap_1
          End If;

          -- Transition 974 - tr_949_2
          If (p_969_avail >= 1) and 
             (conv_integer(PRES1_OUT) = 0 AND conv_integer(PRES2_OUT) = 1) -- guard expr 
          Then
              p_969_avail := p_969_avail - 1;    -- open_gate_out2_1
              p_975_add := p_975_add + 1;   -- open_gate_out3_1
          End If;

          -- Transition 976 - tr_954_2
          If (p_967_avail >= 1) and 
             (conv_integer(PRES1_OUT) = 0 AND conv_integer(PRES2_OUT) = 0 AND conv_integer(TICKET_OUT) = 0) -- guard expr 
          Then
              p_967_avail := p_967_avail - 1;    -- enter_press1_1_out
              p_966_add := p_966_add + 1;   -- inic_out_1
          End If;

          -- Transition 977 - tr_957_2
          If (p_968_avail >= 1) and 
             (conv_integer(PRES1_OUT) = 0 AND conv_integer(PRES2_OUT) = 0) -- guard expr 
          Then
              p_968_avail := p_968_avail - 1;    -- open_gate_out1_1
              p_966_add := p_966_add + 1;   -- inic_out_1
              p_91_add := p_91_add + 1;   -- cap_total_occupied
              p_852_add := p_852_add + 1;   -- cap_1_occupied
          End If;

          -- Transition 978 - tr_960_2
          If (p_969_avail >= 1) and 
             (conv_integer(PRES1_OUT) = 1 AND conv_integer(PRES2_OUT) = 0) -- guard expr 
          Then
              p_969_avail := p_969_avail - 1;    -- open_gate_out2_1
              p_968_add := p_968_add + 1;   -- open_gate_out1_1
          End If;

          -- Transition 979 - tr_963_2
          If (p_975_avail >= 1) and 
             (conv_integer(PRES1_OUT) = 1 AND conv_integer(PRES2_OUT) = 1) -- guard expr 
          Then
              p_975_avail := p_975_avail - 1;    -- open_gate_out3_1
              p_969_add := p_969_add + 1;   -- open_gate_out2_1
          End If;

          -- Transition 1034 - tr_7_2
          If (p_1030_avail >= 1) and 
             (conv_integer(PRES1_IN_c) = 1 AND conv_integer(PRES2_IN_c) = 0 AND conv_integer(TICKET_IN_c) = 0) -- guard expr 
          Then
              p_1030_avail := p_1030_avail - 1;    -- inic_in_2
              p_1031_add := p_1031_add + 1;   -- enter_press1_2_in
          End If;

          -- Transition 1035 - tr_9_2
          If (p_1031_avail >= 1) and
             (p_93_avail >= 1) and
             (p_881_avail >= 1) and 
             (conv_integer(PRES1_IN_c) = 1 AND conv_integer(PRES2_IN_c) = 0 AND conv_integer(TICKET_IN_c) = 1) -- guard expr 
          Then
              p_1031_avail := p_1031_avail - 1;    -- enter_press1_2_in
              p_93_avail := p_93_avail - 1;    -- cap_total_free
              p_881_avail := p_881_avail - 1;    -- cap_2_free
              p_1032_add := p_1032_add + 1;   -- open_gate_in1_2
          End If;

          -- Transition 1036 - tr_11_2
          If (p_1032_avail >= 1) and 
             (conv_integer(PRES1_IN_c) = 1 AND conv_integer(PRES2_IN_c) = 1) -- guard expr 
          Then
              p_1032_avail := p_1032_avail - 1;    -- open_gate_in1_2
              p_1033_add := p_1033_add + 1;   -- open_gate_in2_2
          End If;

          -- Transition 1037 - tr_12_2
          If (p_1039_avail >= 1) and 
             (conv_integer(PRES1_IN_c) = 0 AND conv_integer(PRES2_IN_c) = 0) -- guard expr 
          Then
              p_1039_avail := p_1039_avail - 1;    -- open_gate_in3_2
              p_1030_add := p_1030_add + 1;   -- inic_in_2
              p_91_add := p_91_add + 1;   -- cap_total_occupied
              p_858_add := p_858_add + 1;   -- cap_2_occupied
          End If;

          -- Transition 1038 - tr_949_3
          If (p_1033_avail >= 1) and 
             (conv_integer(PRES1_IN_c) = 0 AND conv_integer(PRES2_IN_c) = 1) -- guard expr 
          Then
              p_1033_avail := p_1033_avail - 1;    -- open_gate_in2_2
              p_1039_add := p_1039_add + 1;   -- open_gate_in3_2
          End If;

          -- Transition 1040 - tr_954_3
          If (p_1031_avail >= 1) and 
             (conv_integer(PRES1_IN_c) = 0 AND conv_integer(PRES2_IN_c) = 0 AND conv_integer(TICKET_IN_c) = 0) -- guard expr 
          Then
              p_1031_avail := p_1031_avail - 1;    -- enter_press1_2_in
              p_1030_add := p_1030_add + 1;   -- inic_in_2
          End If;

          -- Transition 1041 - tr_957_3
          If (p_1032_avail >= 1) and 
             (conv_integer(PRES1_IN_c) = 0 AND conv_integer(PRES2_IN_c) = 0) -- guard expr 
          Then
              p_1032_avail := p_1032_avail - 1;    -- open_gate_in1_2
              p_1030_add := p_1030_add + 1;   -- inic_in_2
              p_93_add := p_93_add + 1;   -- cap_total_free
              p_881_add := p_881_add + 1;   -- cap_2_free
          End If;

          -- Transition 1042 - tr_960_3
          If (p_1033_avail >= 1) and 
             (conv_integer(PRES1_IN_c) = 1 AND conv_integer(PRES2_IN_c) = 0) -- guard expr 
          Then
              p_1033_avail := p_1033_avail - 1;    -- open_gate_in2_2
              p_1032_add := p_1032_add + 1;   -- open_gate_in1_2
          End If;

          -- Transition 1043 - tr_963_3
          If (p_1039_avail >= 1) and 
             (conv_integer(PRES1_IN_c) = 1 AND conv_integer(PRES2_IN_c) = 1) -- guard expr 
          Then
              p_1039_avail := p_1039_avail - 1;    -- open_gate_in3_2
              p_1033_add := p_1033_add + 1;   -- open_gate_in2_2
          End If;

          -- Transition 1066 - tr_7_3_2
          If (p_1062_avail >= 1) and 
             (conv_integer(PRES1_OUT_c) = 1 AND conv_integer(PRES2_OUT_c) = 0 AND conv_integer(TICKET_OUT_c) = 0) -- guard expr 
          Then
              p_1062_avail := p_1062_avail - 1;    -- inic_out_2
              p_1063_add := p_1063_add + 1;   -- enter_press1_2_out
          End If;

          -- Transition 1067 - tr_9_3_2
          If (p_1063_avail >= 1) and
             (p_91_avail >= 1) and
             (p_858_avail >= 1) and 
             (conv_integer(PRES1_OUT_c) = 1 AND conv_integer(PRES2_OUT_c) = 0 AND conv_integer(TICKET_OUT_c) = 1) -- guard expr 
          Then
              p_1063_avail := p_1063_avail - 1;    -- enter_press1_2_out
              p_91_avail := p_91_avail - 1;    -- cap_total_occupied
              p_858_avail := p_858_avail - 1;    -- cap_2_occupied
              p_1064_add := p_1064_add + 1;   -- open_gate_out1_2
          End If;

          -- Transition 1068 - tr_11_3_2
          If (p_1064_avail >= 1) and 
             (conv_integer(PRES1_OUT_c) = 1 AND conv_integer(PRES2_OUT_c) = 1) -- guard expr 
          Then
              p_1064_avail := p_1064_avail - 1;    -- open_gate_out1_2
              p_1065_add := p_1065_add + 1;   -- open_gate_out2_2
          End If;

          -- Transition 1069 - tr_12_3_2
          If (p_1071_avail >= 1) and 
             (conv_integer(PRES1_OUT_c) = 0 AND conv_integer(PRES2_OUT_c) = 0) -- guard expr 
          Then
              p_1071_avail := p_1071_avail - 1;    -- open_gate_out3_2
              p_1062_add := p_1062_add + 1;   -- inic_out_2
              p_881_add := p_881_add + 1;   -- cap_2_free
              p_93_add := p_93_add + 1;   -- cap_total_free
          End If;

          -- Transition 1070 - tr_949_2_2
          If (p_1065_avail >= 1) and 
             (conv_integer(PRES1_OUT_c) = 0 AND conv_integer(PRES2_OUT_c) = 1) -- guard expr 
          Then
              p_1065_avail := p_1065_avail - 1;    -- open_gate_out2_2
              p_1071_add := p_1071_add + 1;   -- open_gate_out3_2
          End If;

          -- Transition 1072 - tr_954_2_2
          If (p_1063_avail >= 1) and 
             (conv_integer(PRES1_OUT_c) = 0 AND conv_integer(PRES2_OUT_c) = 0 AND conv_integer(TICKET_OUT_c) = 0) -- guard expr 
          Then
              p_1063_avail := p_1063_avail - 1;    -- enter_press1_2_out
              p_1062_add := p_1062_add + 1;   -- inic_out_2
          End If;

          -- Transition 1073 - tr_957_2_2
          If (p_1064_avail >= 1) and 
             (conv_integer(PRES1_OUT_c) = 0 AND conv_integer(PRES2_OUT_c) = 0) -- guard expr 
          Then
              p_1064_avail := p_1064_avail - 1;    -- open_gate_out1_2
              p_1062_add := p_1062_add + 1;   -- inic_out_2
              p_91_add := p_91_add + 1;   -- cap_total_occupied
              p_858_add := p_858_add + 1;   -- cap_2_occupied
          End If;

          -- Transition 1074 - tr_960_2_2
          If (p_1065_avail >= 1) and 
             (conv_integer(PRES1_OUT_c) = 1 AND conv_integer(PRES2_OUT_c) = 0) -- guard expr 
          Then
              p_1065_avail := p_1065_avail - 1;    -- open_gate_out2_2
              p_1064_add := p_1064_add + 1;   -- open_gate_out1_2
          End If;

          -- Transition 1075 - tr_963_2_2
          If (p_1071_avail >= 1) and 
             (conv_integer(PRES1_OUT_c) = 1 AND conv_integer(PRES2_OUT_c) = 1) -- guard expr 
          Then
              p_1071_avail := p_1071_avail - 1;    -- open_gate_out3_2
              p_1065_add := p_1065_add + 1;   -- open_gate_out2_2
          End If;

          -- Transition 1152 - tr_1152
          If (p_889_avail >= 1) and
             (p_871_avail >= 1) and 
             (conv_integer(AND_Y_up) = 1 AND conv_integer(AND_X_up) = 0) -- guard expr 
          Then
              p_889_avail := p_889_avail - 1;    -- inic_slope_1_2
              p_871_avail := p_871_avail - 1;    -- cap_1
              p_1153_add := p_1153_add + 1;   -- pl_1153
          End If;

          -- Transition 1156 - tr_1156
          If (p_1153_avail >= 1) and 
             (conv_integer(AND_Y_up) = 1 AND conv_integer(AND_X_up) = 1) -- guard expr 
          Then
              p_1153_avail := p_1153_avail - 1;    -- pl_1153
              p_1154_add := p_1154_add + 1;   -- pl_1154
          End If;

          -- Transition 1157 - tr_1157
          If (p_1154_avail >= 1) and 
             (conv_integer(AND_Y_up) = 0 AND conv_integer(AND_X_up) = 1) -- guard expr 
          Then
              p_1154_avail := p_1154_avail - 1;    -- pl_1154
              p_1155_add := p_1155_add + 1;   -- pl_1155
          End If;

          -- Transition 1158 - tr_1158
          If (p_1155_avail >= 1) and
             (p_858_avail >= 1) and 
             (conv_integer(AND_Y_up) = 0 AND conv_integer(AND_X_up) = 0) -- guard expr 
          Then
              p_1155_avail := p_1155_avail - 1;    -- pl_1155
              p_858_avail := p_858_avail - 1;    -- cap_2_occupied
              p_889_add := p_889_add + 1;   -- inic_slope_1_2
              p_852_add := p_852_add + 1;   -- cap_1_occupied
              p_881_add := p_881_add + 1;   -- cap_2_free
          End If;

          -- Transition 1159 - tr_1159
          If (p_1153_avail >= 1) and 
             (conv_integer(AND_Y_up) = 0 AND conv_integer(AND_X_up) = 0) -- guard expr 
          Then
              p_1153_avail := p_1153_avail - 1;    -- pl_1153
              p_889_add := p_889_add + 1;   -- inic_slope_1_2
              p_871_add := p_871_add + 1;   -- cap_1
          End If;

          -- Transition 1160 - tr_1160
          If (p_1154_avail >= 1) and 
             (conv_integer(AND_Y_up) = 1 AND conv_integer(AND_X_up) = 0) -- guard expr 
          Then
              p_1154_avail := p_1154_avail - 1;    -- pl_1154
              p_1153_add := p_1153_add + 1;   -- pl_1153
          End If;

          -- Transition 1161 - tr_1161
          If (p_1155_avail >= 1) and 
             (conv_integer(AND_Y_up) = 1 AND conv_integer(AND_X_up) = 1) -- guard expr 
          Then
              p_1155_avail := p_1155_avail - 1;    -- pl_1155
              p_1154_add := p_1154_add + 1;   -- pl_1154
          End If;

          -- Transition 1192 - tr_1192
          If (p_916_avail >= 1) and
             (p_881_avail >= 1) and 
             (conv_integer(AND_Y_down) = 1 AND conv_integer(AND_X_down) = 0) -- guard expr 
          Then
              p_916_avail := p_916_avail - 1;    -- inic_slope_2_1
              p_881_avail := p_881_avail - 1;    -- cap_2_free
              p_1193_add := p_1193_add + 1;   -- pl_1193
          End If;

          -- Transition 1196 - tr_1196
          If (p_1193_avail >= 1) and 
             (conv_integer(AND_Y_down) = 1 AND conv_integer(AND_X_down) = 1) -- guard expr 
          Then
              p_1193_avail := p_1193_avail - 1;    -- pl_1193
              p_1194_add := p_1194_add + 1;   -- pl_1194
          End If;

          -- Transition 1197 - tr_1197
          If (p_1194_avail >= 1) and 
             (conv_integer(AND_Y_down) = 0 AND conv_integer(AND_X_down) = 1) -- guard expr 
          Then
              p_1194_avail := p_1194_avail - 1;    -- pl_1194
              p_1195_add := p_1195_add + 1;   -- pl_1195
          End If;

          -- Transition 1198 - tr_1198
          If (p_1195_avail >= 1) and
             (p_852_avail >= 1) and 
             (conv_integer(AND_Y_down) = 0 AND conv_integer(AND_X_down) = 0) -- guard expr 
          Then
              p_1195_avail := p_1195_avail - 1;    -- pl_1195
              p_852_avail := p_852_avail - 1;    -- cap_1_occupied
              p_916_add := p_916_add + 1;   -- inic_slope_2_1
              p_858_add := p_858_add + 1;   -- cap_2_occupied
              p_871_add := p_871_add + 1;   -- cap_1
          End If;

          -- Transition 1199 - tr_1199
          If (p_1193_avail >= 1) and 
             (conv_integer(AND_Y_down) = 0 AND conv_integer(AND_X_down) = 0) -- guard expr 
          Then
              p_1193_avail := p_1193_avail - 1;    -- pl_1193
              p_916_add := p_916_add + 1;   -- inic_slope_2_1
              p_881_add := p_881_add + 1;   -- cap_2_free
          End If;

          -- Transition 1200 - tr_1200
          If (p_1194_avail >= 1) and 
             (conv_integer(AND_Y_down) = 1 AND conv_integer(AND_X_down) = 0) -- guard expr 
          Then
              p_1194_avail := p_1194_avail - 1;    -- pl_1194
              p_1193_add := p_1193_add + 1;   -- pl_1193
          End If;

          -- Transition 1201 - tr_1201
          If (p_1195_avail >= 1) and 
             (conv_integer(AND_Y_down) = 1 AND conv_integer(AND_X_down) = 1) -- guard expr 
          Then
              p_1195_avail := p_1195_avail - 1;    -- pl_1195
              p_1194_add := p_1194_add + 1;   -- pl_1194
          End If;

          -- Calculate final place marking:
          p_2 <= p_2_avail + p_2_add;
          p_3 <= p_3_avail + p_3_add;
          p_5 <= p_5_avail + p_5_add;
          p_6 <= p_6_avail + p_6_add;
          p_91 <= p_91_avail + p_91_add;
          p_93 <= p_93_avail + p_93_add;
          p_852 <= p_852_avail + p_852_add;
          p_858 <= p_858_avail + p_858_add;
          p_871 <= p_871_avail + p_871_add;
          p_881 <= p_881_avail + p_881_add;
          p_889 <= p_889_avail + p_889_add;
          p_890 <= p_890_avail + p_890_add;
          p_891 <= p_891_avail + p_891_add;
          p_907 <= p_907_avail + p_907_add;
          p_916 <= p_916_avail + p_916_add;
          p_917 <= p_917_avail + p_917_add;
          p_918 <= p_918_avail + p_918_add;
          p_924 <= p_924_avail + p_924_add;
          p_950 <= p_950_avail + p_950_add;
          p_966 <= p_966_avail + p_966_add;
          p_967 <= p_967_avail + p_967_add;
          p_968 <= p_968_avail + p_968_add;
          p_969 <= p_969_avail + p_969_add;
          p_975 <= p_975_avail + p_975_add;
          p_1030 <= p_1030_avail + p_1030_add;
          p_1031 <= p_1031_avail + p_1031_add;
          p_1032 <= p_1032_avail + p_1032_add;
          p_1033 <= p_1033_avail + p_1033_add;
          p_1039 <= p_1039_avail + p_1039_add;
          p_1062 <= p_1062_avail + p_1062_add;
          p_1063 <= p_1063_avail + p_1063_add;
          p_1064 <= p_1064_avail + p_1064_add;
          p_1065 <= p_1065_avail + p_1065_add;
          p_1071 <= p_1071_avail + p_1071_add;
          p_1153 <= p_1153_avail + p_1153_add;
          p_1154 <= p_1154_avail + p_1154_add;
          p_1155 <= p_1155_avail + p_1155_add;
          p_1176 <= p_1176_avail + p_1176_add;
          p_1193 <= p_1193_avail + p_1193_add;
          p_1194 <= p_1194_avail + p_1194_add;
          p_1195 <= p_1195_avail + p_1195_add;

          -- Apply output events to ouput signals:

--	                   entry1                   out1                     entry2                    out2                      slope1to2                slope2to1
	p1 <= (to_unsigned(p_916,1)(0), to_unsigned(p_889,1)(0), to_unsigned(p_1062,1)(0), to_unsigned(p_1030,1)(0), to_unsigned(p_966,1)(0), to_unsigned(p_2,1)(0));
	p2 <= (to_unsigned(p_917,1)(0), to_unsigned(p_890,1)(0), to_unsigned(p_1063,1)(0), to_unsigned(p_1031,1)(0), to_unsigned(p_967,1)(0), to_unsigned(p_3,1)(0));
	p3 <= (to_unsigned(p_918,1)(0), to_unsigned(p_891,1)(0), to_unsigned(p_1064,1)(0), to_unsigned(p_1032,1)(0), to_unsigned(p_968,1)(0), to_unsigned(p_5,1)(0));
	p4 <= (to_unsigned(p_924,1)(0), to_unsigned(p_907,1)(0), to_unsigned(p_1065,1)(0), to_unsigned(p_1033,1)(0), to_unsigned(p_969,1)(0), to_unsigned(p_6,1)(0));	 
	p5 <= ('0', '0', std_logic(to_unsigned(p_1071,1)(0)), std_logic(to_unsigned(p_1039,1)(0)), std_logic(to_unsigned(p_975,1)(0)), std_logic(to_unsigned(p_950,1)(0)));


          -- Calculate transition-action-output final values:
        End If;
      End If;
    End PROCESS;


    proc_place_outputs: PROCESS( Clk, Enable ) IS
    Variable exp_res, new_value: Integer;
    Begin
      If rising_edge(Clk) Then
        If Reset='1' Then
          s_CANC_IN <= '0';
          s_CANC_OUT <= '0';
          s_CANC_IN_c <= '0';
          s_CANC_OUT_c <= '0';
          s_occupied_1 <= 0;
          s_occupied_2 <= 0;

        Elsif Enable='1' Then

          -- Signal CANC_IN default value:
          new_value := 0;

          -- CANC_IN action on place open_gate_in1_1(p_5)
          If p_5 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN action on place open_gate_in2_1(p_6)
          If p_6 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN action on place open_gate_in3_1(p_950)
          If p_950 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store CANC_IN and check result range:
          If new_value < 0 Then s_CANC_IN <= '0';
            Elsif new_value > 1 Then s_CANC_IN <= '1';
            Else s_CANC_IN <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal CANC_OUT default value:
          new_value := 0;

          -- CANC_OUT action on place open_gate_out1_1(p_968)
          If p_968 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_OUT action on place open_gate_out2_1(p_969)
          If p_969 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_OUT action on place open_gate_out3_1(p_975)
          If p_975 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store CANC_OUT and check result range:
          If new_value < 0 Then s_CANC_OUT <= '0';
            Elsif new_value > 1 Then s_CANC_OUT <= '1';
            Else s_CANC_OUT <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal CANC_IN_c default value:
          new_value := 0;

          -- CANC_IN_c action on place open_gate_in1_2(p_1032)
          If p_1032 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN_c action on place open_gate_in2_2(p_1033)
          If p_1033 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN_c action on place open_gate_in3_2(p_1039)
          If p_1039 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store CANC_IN_c and check result range:
          If new_value < 0 Then s_CANC_IN_c <= '0';
            Elsif new_value > 1 Then s_CANC_IN_c <= '1';
            Else s_CANC_IN_c <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal CANC_OUT_c default value:
          new_value := 0;

          -- CANC_OUT_c action on place open_gate_out1_2(p_1064)
          If p_1064 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_OUT_c action on place open_gate_out2_2(p_1065)
          If p_1065 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_OUT_c action on place open_gate_out3_2(p_1071)
          If p_1071 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store CANC_OUT_c and check result range:
          If new_value < 0 Then s_CANC_OUT_c <= '0';
            Elsif new_value > 1 Then s_CANC_OUT_c <= '1';
            Else s_CANC_OUT_c <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal occupied_1 default value:
          new_value := 0;

          -- occupied_1 action on place pl_1176(p_1176)
          If p_1176 > 0 Then
            exp_res := p_852;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- Store occupied_1 and check result range:
          If new_value < 0 Then s_occupied_1 <= 0;
            Elsif new_value > 99 Then s_occupied_1 <= 99;
            Else s_occupied_1 <= new_value;
          End If;

          -- Signal occupied_2 default value:
          new_value := 0;

          -- occupied_2 action on place pl_1176(p_1176)
          If p_1176 > 0 Then
            exp_res := p_858;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- Store occupied_2 and check result range:
          If new_value < 0 Then s_occupied_2 <= 0;
            Elsif new_value > 99 Then s_occupied_2 <= 99;
            Else s_occupied_2 <= new_value;
          End If;

        End If;
      End If;
    End PROCESS;

    CANC_IN <= s_CANC_IN;
    CANC_OUT <= s_CANC_OUT;
    CANC_IN_c <= s_CANC_IN_c;
    CANC_OUT_c <= s_CANC_OUT_c;
    occupied_1 <= s_occupied_1;
    occupied_2 <= s_occupied_2;

End Structural;
